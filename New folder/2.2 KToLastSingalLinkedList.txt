

//Implement an algorithm to find the kth to last element of a singly linked List
/*--------the first method to implement the funtion-------------------------------------*/
package kql.test.practise;

public class KthToLast{
	public int kthToLast(LinkedListNode head, int k){
		if(k<0) throw new IllegalArgumentException("k < 0");
		if(head==null) {
			return 0;
		} 
		int i = kthToLast(head.next, k)+1;
		if(i==k){
			System.out.println(head.data);
		}
		return i;
	}// end method
	
	//------for test-----------------------------------
	public static void main(String[] args){
		LinkedListNode h = new LinkedListNode(1);
		h.appendToTail(2);
		h.appendToTail(3);
		h.appendToTail(4);
		h.appendToTail(5);
		h.appendToTail(6);
		h.appendToTail(7);
		h.appendToTail(8);
		h.appendToTail(9);
		h.appendToTail(10);
		h.appendToTail(11);
		h.appendToTail(12);
		KthToLast ktol = new KthToLast();
		int k = 9;
		ktol.kthToLast(h, k);
	}
} // end class
/*-----------------------*/
class LinkedListNode{
	int data;
	LinkedListNode next;
	public LinkedListNode(int d){
		data = d;
	}
	void appendToTail(int n){
		LinkedListNode end = new LinkedListNode(n);
		LinkedListNode curr = this;
		while(curr.next!=null){
			curr = curr.next;
		}
		curr.next = end;
	}
}
/*-----------the second method to implement the function-------------------------------------*/
package kql.test.practise;
public class KthToLast {
	public LinkedListNode kthToLast(LinkedListNode head, int k) {
		if (head == null || k <= 0) {
			return null;
		}
		LinkedListNode r1, r2;
		r1 = head;
		r2 = head;
		int cnt = 1;
		while (cnt != k && r2 != null) {
			r2 = r2.next;
			cnt++;
		}
		if (r2 == null)
			return null;
		// at this time cnt ==k, the distance between r2 and r1 is k.
		while (r2.next != null) {
			r1 = r1.next;
			r2 = r2.next;
		}
		// when r2.next==null, return r1.
		return r1;
	}
	// ----------------------------------
	public static void main(String[] args) {
		LinkedListNode h = new LinkedListNode(1);
		h.appendToTail(2);
		h.appendToTail(3);
		h.appendToTail(4);
		h.appendToTail(5);
		h.appendToTail(6);
		h.appendToTail(7);
		h.appendToTail(8);
		h.appendToTail(9);
		KthToLast ktl = new KthToLast();
		int k = 9;
		LinkedListNode rlt = ktl.kthToLast(h, k);
		while (rlt != null) {
			System.out.print(rlt.data + " ");
			rlt = rlt.next;
		}
	}
} // end class
// -----------LinkedListNode-------------------------
class LinkedListNode {
	int data;
	LinkedListNode next;

	public LinkedListNode(int d) {
		data = d;
	}
	void appendToTail(int n) {
		LinkedListNode end = new LinkedListNode(n);
		LinkedListNode current = this;
		while (current.next != null) {
			current = current.next;
		}
		current.next = end;
	}
}

/*-----------------------------------------------------------------------*/
package kql.test.practise;
public class KthToLast{
	public LinkedListNode kthToLast(LinkedListNode head, int k){
		if(head==null||k<0){
			return null;
		}
	LinkedListNode r1, r2;
	r1 = head;
	r2 = head;
	int cnt = 1;
	while(cnt!=k && r2!=null){
		r2 = r2.next;
	}	
	if(r2==null) return null;
	// at this time cnt ==k, the distance between r2 and r1 is k.
	while(r2.next!=null){
		r1 = r1.next;
		r2 = r2.next;
	}
	// when r2.next==null, return r1.
	return r1;
	}
//----------------------------------
	public static void main(String[] args){
		LinkedListNode h = new LinkedListNode(1);
		h.appendToTail(2);
		h.appendToTail(3);
		h.appendToTail(4);
		h.appendToTail(5);
		h.appendToTail(6);
		h.appendToTail(7);
		h.appendToTail(8);
		h.appendToTail(9);
		KToLast ktl = new KToLast();
		int k = 3;
		LinkedListNode rlt = ktl.kToLast(h, k);
		while (rlt != null) {
			System.out.print(rlt.data + " ");
			rlt = rlt.next;
		}
	}
} // end class

/* ----this code can run , but misunderstand thequestions.--------------------*/
public class KToLast {
	public LinkedListNode kToLast(LinkedListNode head, int k) {
		if (head == null || k < 0) {
			throw new IllegalArgumentException("Errors of input items");
		}

		LinkedListNode curr = head;
		int cnt = 1;
		while (cnt != k && curr != null) {
			curr = curr.next;
			cnt++;
		}
		if (curr == null) {
			return null;
		}
		return curr;
	}

	// -----for test----------
	public static void main(String[] args) {
		LinkedListNode h = new LinkedListNode(1);
		h.appendToTail(2);
		h.appendToTail(3);
		h.appendToTail(4);
		h.appendToTail(5);
		h.appendToTail(6);
		h.appendToTail(7);
		h.appendToTail(8);
		h.appendToTail(9);
		KToLast ktl = new KToLast();
		int k = 3;
		LinkedListNode rlt = ktl.kToLast(h, k);
		while (rlt != null) {
			System.out.print(rlt.data + " ");
			rlt = rlt.next;
		}
	}
} // end class

// --------------------
class LinkedListNode {
	int data;
	LinkedListNode next;

	public LinkedListNode(int d) {
		data = d;
	}

	void appendToTail(int n) {
		LinkedListNode end = new LinkedListNode(n);
		LinkedListNode current = this;
		while (current.next != null) {
			current = current.next;
		}
		current.next = end;
	}
}
/*------------------------------------------------------------------------------------*/