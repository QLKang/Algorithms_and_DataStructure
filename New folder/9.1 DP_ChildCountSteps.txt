package com.test2.kql;
/*
 * 9.1 
 * A child is running up a staircase with n steps, and can hop either 1 step, 
 * 2 steps, or 3 steps at a time. Implement a method to count how many possible 
 * ways the child can run up the stairs.
 * 
 */
public class ChildCountStepsDP {

	int steps(int n, int[] r) {
		if(r[n]>0){
			return r[n];
		}
		if (n == 0) {
			r[n]=1;
		} else if (n == 1) {
			r[n] = 1;
		} else if (n == 2) {
			r[n] = 2;
		} else {
			r[n] = steps(n - 1, r) + steps(n - 2, r) + steps(n - 3, r);
		}
		return r[n];
	} // end method

	int steps(int n) {
		if (n < 0) {
			return -1;
		}
		int[] r = new int[n+1];
		return steps(n, r);

	}

	public static void main(String[] args) {
		ChildCountStepsDP ds = new ChildCountStepsDP();
		int n =50;
		int result = ds.steps(n);
		System.out.println(result);
	}
}
/*---------------the following is not DP----------------------------------------*/

public class ChildCountSteps {
	int steps(int n) {
		if (n < 0) {
			return -1;
		} else if (n == 0) {
			return 1;
		} else if (n == 1) {
			return 1;
		} else if (n == 2) {
			return 2;
		} else {
			return steps(n - 1) + steps(n - 2) + steps(n - 3);
		}

	}

	public static void main(String[] args) {
		int n = 30;
		ChildCountSteps sp = new ChildCountSteps();
		int steps = sp.steps(n);
		System.out.println(steps);

	}

}