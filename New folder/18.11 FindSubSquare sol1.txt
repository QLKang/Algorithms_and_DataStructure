package kql.test.practise;

/* solution 1
 * 18.11 Imagine you have a square matrix, where each cell (pixel) is either black
 * or white. Design an algorithm to find the maximum subsquare such that all four 
 * borders are filled with black pixels.
 *  
 *  I define 1 is black, 0 is white
 * 
 * 
 * 
 */

/*-----SubSquare class---------*/
class SubSquare {
	int row = 0;
	int col = 0;
	int subSize = 0;

	public SubSquare(int r, int c, int s) {
		row = r;
		col = c;
		subSize = s;
	}

}

/*------FindSquare class-------*/
public class FindSquare {

	// ----find matrix----------------
	// need return the sub matrix
	SubSquare findMatrix(int[][] square) {
		int size = square.length;
		for (int subSize = size; subSize >= 1; subSize--) {
			SubSquare subsquare = findSubSquare(square, subSize);
			if (subsquare != null)
				return subsquare;
		}
		return null;
	}

	// ----is matrix------------------

	SubSquare findSubSquare(int[][] square, int subSize) {
		for (int row = 0; row <= square.length - subSize; row++) {
			for (int col = 0; col <= square.length - subSize; col++) {
				boolean is = isSquare(square, row, col, subSize);
				if (is == true)
					return new SubSquare(row, col, subSize);
			}
		}

		return null;
	}

	boolean isSquare(int[][] square, int row, int col, int subSize) {

		for (int i = 0; i <= subSize - 1; i++) {
			if (square[row][col + i] == 0)
				return false;
			if (square[row + subSize - 1][col + i] == 0)
				return false;
		}
		for (int j = 0; j <= subSize - 1; j++) {
			if (square[row + j][col] == 0)
				return false;
			if (square[row + j][col + subSize - 1] == 0)
				return false;
		}

		return true;
	}

	// -----------for test---------------
	public static void main(String[] args) {
		int[][] matrix = { 
				{ 0, 0, 1, 0, 0, 1, 0, 1 },
				{ 0, 1, 1, 1, 1, 0, 0, 0 }, 
				{ 0, 1, 0, 1, 1, 1, 0, 0 },
				{ 0, 1, 0, 0, 1, 0, 0, 1 }, 
				{ 0, 1, 1, 1, 1, 0, 1, 0 },
				{ 1, 0, 0, 0, 0, 0, 0, 0 }, 
				{ 1, 0, 0, 0, 0, 0, 1, 0 },
				{ 0, 0, 0, 1, 0, 0, 0, 1 }, };

		FindSquare fs = new FindSquare();
		SubSquare ss = fs.findMatrix(matrix);
		System.out.println("row: " + ss.row + ", col: " + ss.col
				+ ", subsize: " + ss.subSize);

	}
}
