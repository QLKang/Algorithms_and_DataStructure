
/* EXAMPLE
 * Input: (6 -> 1 -> 7) + (2 -> 9 -> 5).That is, 617 + 295.
 * Output: 9 -> 1 -> 2.That is, 912.
 * 
 * Note: 1. pay more attention that the same method names should not have the same variables.
 * 			e.g. add(int a, int b) and add(int a, int b) in the same class is wrong. But add(int a, int b, int c) and add(int a, int b) in the same class is right 
 * 	 2. if the length of linked list1 and linked list2 is different, append 0 to the beginning of the list not the end of it!
 * 	 3. each linked list node is supposed to be one digit like 0, 1,2,...9, not two or more digits number like 23, 12, 134, and so on. 
 * 		to avoid this condition, we can add some boundary conditions to constrain it.
 * 			in this code, I did not constrain each node as one digit, but I can get the right calculation since the carrier could be larger than 1, like 2, 23,...  
 * 	 4. LList appendZeros() must return a varible LList l, or the appending function will be failed.
 * this function includes two class
 * class LList{}:	define the linked list
 * class AddTwoLists{}: define addition
 * 		LList addTwoNums(LList l1, LList l2):	l1: number1, l2: number2, return the sum of number1 and number2
 * 		LList addTwoNums1(LList l1, LList l2):	use the previous method
 * 		LList appendZeros(LList l, int k):		append k zeros before the shorter list
 * 		int length(LList l):					calculate the length of the list
 * 
 */
package kql.test.practise;
/*------class LList-----------------------------------------------------------------*/
class LList {
	int data = 0;
	int c = 0; // carrier
	LList next = null;

	public LList(int d) {
		data = d;
	}

	void appendToTail(int n) {
		LList end = new LList(n);
		LList current = this;
		while (current.next != null) {
			current = current.next;

		}
		current.next = end;
	}
} // end class

/*--------class AddTwoLists-----------------------------------------------------------*/
public class AddTwoLists {
	LList result = new LList(0);


/*------------*/
	LList addTwoNums(LList l1, LList l2) {
		// base condition
		if (l1.next == null && l2.next == null) {
			int s = l1.data + l2.data + 0;
			result.data = s % 10;
			result.c = s / 10;
			return result;
		}
		result = addTwoNums(l1.next, l2.next);
		LList newDigit = new LList(0);
		int s = result.c + l1.data + l2.data;
		newDigit.data = s % 10;
		newDigit.c = s / 10;
		newDigit.next = result;
		result = newDigit;
		return result;
	} // end add

//-------------

	LList addTwoNums1(LList l1, LList l2) {
		if (l1 == null)
			return l2;
		if (l2 == null)
			return l1;
		int len1 = length(l1);
		int len2 = length(l2);
		if (len1 > len2) {
			l2 = appendZeros(l2, len1 - len2);
		} else if (len1 < len2) {
			l1 = appendZeros(l1, len2 - len1);
		}

		LList result1 = addTwoNums(l1, l2); // iteration
		if (result1.c != 0) {
			LList newDigit = new LList(result1.c);
			newDigit.next = result1;
			result1 = newDigit;
		}
		return result1;
	} // end add


/*----------------------*/
	/* after excuting this function, the linked list l can not be append zeros before it. */
//	void appendZeros(LList l, int k) {
//		if (k < 0)
//			throw new IllegalArgumentException("Error: k < 0.");
//		while (k != 0) {
//			LList newZero = new LList(0);
//			newZero.next = l;
//			l = newZero;
//			k--;
//		}
//	}// end appendZeros
	LList appendZeros(LList l, int k){
		if(k<0)
			throw new IllegalArgumentException("Error: k < 0.");
		while(k!=0){
			LList newZero = new LList(0);
			newZero.next = l;
			l = newZero;
			k--;
		}
		return l;
	}
	
	/*----------------------*/
	int length(LList l) {
		if (l == null)
			return 0;
		LList current = l;
		int cnt = 1;
		while (current.next != null) {
			current = current.next;
			cnt++;
		}
		return cnt;
	} // end length
/*-----------------for test--------------------*/
	public static void main(String[] args){
		// for test1
		// number1: 617
//		LList l1 = new LList(6);
//		l1.appendToTail(1);
//		l1.appendToTail(7);
		//number2: 295
//		LList l2 = new LList(2);
//		l2.appendToTail(9);
//		l2.appendToTail(5);
//		for test2
//		LList l1 = new LList(9);
//		LList l2 = new LList(121);
//		for test3
		LList l1 = new LList(6);
		l1.appendToTail(1);
		l1.appendToTail(7);
		l1.appendToTail(8);
		l1.appendToTail(3);
		
		LList l2 = new LList(2);
		l2.appendToTail(9);
		l2.appendToTail(5);
		
		AddTwoLists add = new AddTwoLists();
		LList result = add.addTwoNums1(l1, l2);
		LList runner = result;
		while(runner != null){
			System.out.print(runner.data+" ");
			runner = runner.next;
		}
	}
} // end class

