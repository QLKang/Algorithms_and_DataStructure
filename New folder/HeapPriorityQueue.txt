package com.test2.kql;
/* 18.9 Numbers are randomly generated and passed to a method. Write a program to find and maintain the median value as new values are generated.
*/
// implement Comparator! and PriorityQueue
import java.util.Comparator;
import java.util.PriorityQueue;

class maxHeapComparator implements Comparator<Integer> {
	@Override
	public int compare(Integer i, Integer j) {
		if (i < j) {
			return -1;
		} else if (i > j) {
			return 1;
		}
		return 0;
	}
}

class minHeapComparator implements Comparator<Integer> {
	@Override
	public int compare(Integer i, Integer j) {
		if (i < j) {
			return 1;
		} else if (i > j) {
			return -1;
		}

		return 0;
	}
}

public class HeapTest {
	private Comparator<Integer> maxHeapComparator;
	private Comparator<Integer> minHeapComparator;
	// private PriorityQueue<Integer> m/axHeap, minHeap;
	Comparator<Integer> maxcomparator = new maxHeapComparator();
	Comparator<Integer> mincomparator = new minHeapComparator();
	PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(10,
			maxcomparator);
	PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(10,
			mincomparator);

	public void addNewNumber(int randomNumber) {
		/*
		 * Note: addNewNumber maintains a condition that maxHeap.sizeQ >=
		 * minHeap.sizeQ
		 */
		if (maxHeap.size() == minHeap.size()) {
			if ((minHeap.peek() != null) && randomNumber > minHeap.peek()) {
				maxHeap.offer(minHeap.poll());
				minHeap.offer(randomNumber);
			} else {
				maxHeap.offer(randomNumber);
			}
		} else {
			if (randomNumber < maxHeap.peek()) {
				minHeap.offer(maxHeap.poll());
				maxHeap.offer(randomNumber);
			} else {
				minHeap.offer(randomNumber);
			}
		}
	}

	public double getMedian() {
		/*
		 * maxHeap is always at least as big as minHeap. So if maxHeap is empty,
		 * then minHeap is also.
		 */
		if (maxHeap.isEmpty()) {
			return 0;
		}
		if (maxHeap.size() == minHeap.size()) {
			return ((double) minHeap.peek() + (double) maxHeap.peek()) / 2;
		} else {
			/*
			 * If maxHeap and minHeap are of different sizes., then maxHeap must
			 * have one extra element. Return maxHeap's top element.
			 */
			return maxHeap.peek();
		}
	}

	public static void main(String[] args) {
		HeapTest ht = new HeapTest();
		ht.addNewNumber(3);
		ht.addNewNumber(4);
		ht.addNewNumber(5);
		ht.addNewNumber(6);
		ht.addNewNumber(7);
		ht.addNewNumber(8);

		double db = ht.getMedian();
		System.out.println(db);
	}

}
