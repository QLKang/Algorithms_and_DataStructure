package com.test2.kql;

/* 
 * 
 * 
 */
import java.util.ArrayList;
import java.util.LinkedList;

//import java.util.Stack;
public class SetOfStacks {
	int subsize;

	public SetOfStacks(int s) {
		subsize = s;
	}

	ArrayList<LinkedList<Integer>> stacks = new ArrayList<LinkedList<Integer>>();
	LinkedList<Integer> stk = null;

	int popAt(int id) {
		int pp = 0;
		if (stacks.isEmpty()) {
			throw new IllegalArgumentException("stacks are empty.");
		} else {
			LinkedList<Integer> last = getLastStk();
			if (id < 0 || id > (stacks.size() - 1) * subsize + last.size() - 1)
				throw new IllegalArgumentException("Index is illegal.");
			int stkId = getStackId(id);
			int offset = getOffset(id);
			stk = stacks.get(stkId);
			pp = stk.remove(offset);
			shift(stkId);
		}

		return pp;
	}

	int getStackId(int index) {
		return index / subsize;
	}

	int getOffset(int index) {
		return index % subsize;
	}

	LinkedList<Integer> getLastStk() {
		if (stacks.isEmpty())
			throw new IllegalArgumentException("stacks are empty.");
		int size = stacks.size();
		return stacks.get(size - 1);
	}

	void shift(int stkId) {
		stk = stacks.get(stkId);
		if (stkId == stacks.size() - 1) {
			if (stk.isEmpty()) {
				stacks.remove(stacks.size() - 1);
			}
			return;
		}
		while ((stkId + 1) != stacks.size() - 1) {
			stk.add(stacks.get(stkId + 1).removeFirst());
			stkId++;
		}
		stkId++;
		if (stkId == stacks.size() - 1) {
			stk = stacks.get(stkId);
			stk.removeFirst();
			if (stk.isEmpty())
				stacks.remove(stacks.size() - 1);
		}
	}

	void push(int x) {
		// more code...
		if (stacks.isEmpty()) {
			stk = new LinkedList<Integer>();
			stk.add(x);
			stacks.add(stk);
		} else {
			stk = getLastStk();
			if (stk.size() == subsize) {
				LinkedList<Integer> newstk = new LinkedList<Integer>();
				newstk.add(x);
				stacks.add(newstk);
			} else {
				stk.add(x);
			}
		}
	}

	int pop() {
		// more code
		int pp = 0;
		if (stacks.isEmpty()) {
			throw new IllegalArgumentException("stacks are emtpy.");
		} else {
			stk = getLastStk();
			pp = stk.removeLast();
			if (stk.isEmpty())
				stacks.remove(stacks.size() - 1);
		}
		return pp;
	}

	// for test
	public static void main(String[] args) {
		int subsize = 5;
		SetOfStacks sos = new SetOfStacks(subsize);

		for (int i = 0; i < 13; i++) {
			sos.push(i);
		}
		System.out.println(sos.stacks);

		sos.pop();
		sos.pop();

		System.out.println(sos.stacks);
		int index = 10;
		int pp = sos.popAt(index);
		System.out.println("Pop at " + index + ": " + pp);
		System.out.println(sos.stacks);

	}

}
