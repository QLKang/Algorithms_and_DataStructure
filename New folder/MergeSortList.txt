package org.leetcode.test;

/* a linked list, sort it.
	Input:  5 7 4 1 6 8 3 2
	Output: 1 2 3 4 5 6 7 8 


*/
class Solution {
	ListNode mergeSort(ListNode head) {
		if (head == null)
			return null;
		ListNode curr = head;
		int len = 0;
		while (curr != null) {
			curr = curr.next;
			len++;
		}
		return mergeSort(head, len);
	}

	ListNode mergeSort(ListNode head, int len) {
		// more code
		if (len == 1) {
			head.next = null;
			return head;
		}
		if (len > 1) {
			int mid = len / 2;
			int cnt = 0;
			ListNode curr = head;
			ListNode part1 = head;
			while (cnt != mid) {
				curr = curr.next;
				cnt++;
			}
			ListNode part2 = curr;
			ListNode list1 = mergeSort(part1, mid);
			ListNode list2 = mergeSort(part2, len - mid);
			ListNode newlist = merge(list1, list2);

			return newlist;
		}
		return null;
	}

	ListNode merge(ListNode list1, ListNode list2) {
		if (list1 == null)
			return list2;
		if (list2 == null)
			return list1;

		ListNode head;
		if (list1.data < list2.data) {
			head = list1;
		} else {
			head = list2;
			list2 = list1;
			list1 = head;
		}
		while (list1.next != null && list2 != null) {
			if (list1.next.data <= list2.data) {
				list1 = list1.next;
			} else {
				ListNode tmp = list1.next;
				list1.next = list2;
				list2 = tmp;
			}
		}
		if (list1.next == null)
			list1.next = list2;
		return head;
	} // end merge

	ListNode mergeLists(ListNode list1, ListNode list2) {
		if (list1 == null)
			return list2;
		if (list2 == null)
			return list1;

		if (list1.data < list2.data) {
			list1.next = mergeLists(list1.next, list2);
			return list1;
		} else {
			list2.next = mergeLists(list2.next, list1);
			return list2;
		}
	}
} // end class
/*-------------------*/
class ListNode {
	int data;
	ListNode next;

	public ListNode(int d) {
		data = d;
	}
} 

/*-----for test------*/
public class TestII {
	public static void main(String[] args) {
		Solution sol = new Solution();

		ListNode head = new ListNode(5);
		head.next = new ListNode(7);
		head.next.next = new ListNode(4);
		head.next.next.next = new ListNode(1);
		head.next.next.next.next = new ListNode(6);
		head.next.next.next.next.next = new ListNode(8);
		head.next.next.next.next.next.next = new ListNode(3);
		head.next.next.next.next.next.next.next = new ListNode(2);

		ListNode sorted = sol.mergeSort(head);
		ListNode curr = sorted;

		while (curr != null) {
			System.out.print(curr.data + " ");
			curr = curr.next;
		}
	}
}
