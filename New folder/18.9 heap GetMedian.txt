package com.test2.kql;

/*
 * 18.9 Numbers are randomly generated and passed to a method. 
 * Write a program to find and maintain the median value as 
 * new values are generated.
 */
import java.util.Comparator;
import java.util.PriorityQueue;

/*-------------get the median number---------------*/
public class GetMedian {

	PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
	PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(5,
			new MaxHeapComparator());

	// -----------insert new element--------------
	void insert(int n) {
		if (minHeap.isEmpty() && maxHeap.isEmpty()) {
			maxHeap.add(n);
		}
		if (maxHeap.size() == minHeap.size()) {
			int pk = minHeap.peek();
			if (n <= pk) {
				maxHeap.add(n);
			} else {
				maxHeap.add(minHeap.poll());
				minHeap.add(n);
			}

		} else if (maxHeap.size() > minHeap.size()) {
			int pk = maxHeap.peek();
			if (n >= pk) {
				minHeap.add(n);
			} else {
				minHeap.add(maxHeap.poll());
				maxHeap.add(n);
			}
		}

	} // end insert method

	// ------get median---------
	int getMedianTest() {
		if (minHeap.isEmpty() && maxHeap.isEmpty()) {
			throw new IllegalArgumentException(
					"there are elements in the heaps. :(");
		}
		if (minHeap.size() == maxHeap.size()) {
			return (minHeap.peek() + maxHeap.peek()) / 2;
		} else if (maxHeap.size() > minHeap.size()) {
			return maxHeap.peek();
		}
		return Integer.MIN_VALUE;
	}

	// ----------for test------------
	public static void main(String[] args) {
		GetMedian gm = new GetMedian();
		int[] arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
				17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
				33, 34, 35, 36, 37, 38, 39, 40 };
		for (int i = 0; i < arr.length; i++) {
			gm.insert(arr[i]);
		}
		int r = gm.getMedianTest();
		System.out.print(r);

	}

}

/*-------------make a max heap comparator--------------------*/
class MaxHeapComparator implements Comparator<Integer> {

	@Override
	public int compare(Integer o1, Integer o2) {
		return -(o1 - o2);
	}

}