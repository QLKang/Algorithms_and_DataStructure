package kql.test.practise;

import java.util.LinkedList;

/* An animal shelter holds only dogs and cats, and operates on a strictly "first in,
 * first out" basis. People must adopt either the "oldest" (based on arrival time) of
 * all animals at the shelter, or they can select whether they would prefer a dog or
 * a cat (and will receive the oldest animal of that type). They cannot select which
 * specificanimal they would like. Create the data structures to maintain this system
 * and implement operations such as enqueue, dequeueAny, dequeueDog and
 * dequeueCat.You may use the built-in LinkedList data structure.
 * 
 * Instances:
 * animalQue:	LinkedList<Animal>, all the dogs and cats under the shelter
 * a:		animal (dog or cat)	
 * Method:	
 * enqueue():		input String "dog" or "cat"
 * enqueueHelp():	enqueue Animal dog==true or cat == true
 * dequeue():	return String "dog" or "cat"
 * dequeueHelp():	return Animal
 * dequeueCat():	return String "cat"
 * dequeueDog():	return String "dog"
 * dequeueCatHelp():	return Animal cat==true, dog == false
 * dequeueDogHelp():	return Animal dog==true, cat == false

1.In this code, when I dequeue a cat/dog, I used linear search to find the first cat/dog, time cost O(n), space(1)
2.Also, I can set each cat/dog to have an index which will be used to dequeue cat/dog, this way will save time but wast space. time cost will be O(1)



 */
class Animal {
	boolean cat = false;
	boolean dog = false;
}

public class AnimalShelter {

	// Instants:

	LinkedList<Animal> animalQue = new LinkedList<Animal>();
	Animal a = null;

	// Methods:

	public void enqueue(String s) {
		a = new Animal();
		if (s == "cat") {
			a.cat = true;
			a.dog = false;
		} else if (s == "dog") {
			a.cat = false;
			a.dog = true;
		} else {
			throw new IllegalArgumentException(
					"Input should be either cat or dog string!!");
		}
		enqueueHelp(a);
	}

	public String dequeue() {
		Animal deq = dequeueHelp();
		if (deq == null)
			return "There are not animals under the shelter";
		if (deq.dog == true)
			return "dog";
		else if (deq.cat == true)
			return "cat";
		return null;
	}

	public String dequeueDog() {
		Animal dg = dequeueDogHelp();
		if (dg == null)
			return "no animals under shelter";
		if (dg.dog == true)
			return "dog";
		return "no dog under shelter. ";
	}

	public String dequeueCat() {
		Animal ct = dequeueCatHelp();
		if (ct == null)
			return "no animals under shelter";
		if (ct.cat == true) {
			return "cat";
		}
		return "no cat under shelter";
	}

	public void enqueueHelp(Animal a) {
		if (a.dog == a.cat)
			throw new IllegalArgumentException("be cat or dog, not be both!!");
		animalQue.add(a);
	}

	public Animal dequeueHelp() {
		if (animalQue.isEmpty()) {
			return null;
		}
		Animal deq = animalQue.remove(0);
		return deq;
	}

	public Animal dequeueDogHelp() {
		Animal d = new Animal();
		int size = animalQue.size();
		int i = 0;
		while (i <= size - 1) {
			d = animalQue.get(i);
			if (d.dog == true) {
				return d;
			}
			i++;
		}
		return null;
	}

	public Animal dequeueCatHelp() {
		Animal c = new Animal();
		int size = animalQue.size();
		int i = 0;
		while (i <= size - 1) {
			c = animalQue.get(i);
			if (c.cat == true) {
				return c;
			}
			i++;
		}
		return null;
	}

	// ----------for test--------------------------------------
	public static void main(String[] args) {
		AnimalShelter aslt = new AnimalShelter();
		// aslt.animalQue = null; // this command should not be executed, or it has error!
		aslt.enqueue("dog");

		aslt.enqueue("cat");
		aslt.enqueue("cat");

		aslt.enqueue("dog");
		aslt.enqueue("dog");
		aslt.enqueue("dog");

		aslt.enqueue("cat");
		aslt.enqueue("cat");
		int ii = 1;
		// display all the animals under the shelter
		for (Animal animal : aslt.animalQue) {
			System.out.print(ii + ":" + animal.cat + " " + animal.dog + ", ");
			ii++;
		}
		System.out.println();
		// test dequeue method
		int i = 1;
		while (i != 19) {
			String temp = aslt.dequeue();
			System.out.println(i + ": " + temp);
			i++;
		}
		// test dequeue cat or dog
		// String d = aslt.dequeueDog();
		// String c = aslt.dequeueCat();
		// System.out.println();
		// System.out.println(c+", "+d);

	}

}// end selter class

