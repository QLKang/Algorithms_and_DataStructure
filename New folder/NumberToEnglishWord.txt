package com.test2.kql;

/*
 * Given any integer, print an English phrase that describes the integer (e.g., "One
 * Thousand, Two Hundred Thirty Four
 the solution of the book seems much clearer. My solution missed the negative number condition
 */

public class PrintEnglishWord {
	/*------print the last three digits--------------------*/

	public String printNumber(int x) {
		int billion_quotient = x / 1000000000;
		int billion_remainder = x % 1000000000;

		String billionStr = "";
		if (billion_quotient != 0) {
			billionStr = printHundred(billion_quotient) + " billion";
		}

		int million_quotient = billion_remainder / 1000000;
		int million_remainder = billion_remainder % 1000000;

		String millionStr = "";
		if (million_quotient != 0) {
			millionStr = " " + printHundred(million_quotient) + " million";
		}

		int thousand_quotient = million_remainder / 1000;
		int thousand_remainder = million_remainder % 1000;
		String thousandStr = "";
		if (thousand_quotient != 0) {
			thousandStr = " " + printHundred(thousand_quotient) + " thousand";

		}

		String hundredStr = "";
		if (thousand_remainder != 0) {
			hundredStr = printHundred(thousand_remainder);
		}

		return billionStr + millionStr + thousandStr + hundredStr;
	}

	public String printHundred(int x) {
		if (x >= 0 && x <= 999) {
			int quotient = 0;
			int remainder = 0;
			String hundredStr = "";
			String tenthStr = "";
			String digitStr = "";
			quotient = x / 100;
			remainder = x % 100;

			if (quotient != 0) {
				hundredStr = " " + pntDigit(quotient) + " hundred";
			}
			if (remainder >= 20 && remainder <= 99) {
				int tenDigit = remainder / 10;
				int dig = remainder % 10;
				if (hundredStr != "") {
					tenthStr = " and " + pntTy(tenDigit);
				} else {
					tenthStr = " " + pntTy(tenDigit);
				}
				if (dig != 0) {
					digitStr = " " + pntDigit(dig);
				}
			} else if (remainder <= 19 && remainder >= 10) {

				if (hundredStr != "") {
					tenthStr = " and " + pntTeen(remainder);
				} else {
					tenthStr = " " + pntTeen(remainder);
				}

			} else if (remainder >= 0 && remainder <= 9) {
				digitStr = " " + pntDigit(remainder);
			}

			return hundredStr + tenthStr + digitStr;
		}
		return null;
	}

	/*---------teens-----------------*/
	public String pntTeen(int x) {
		switch (x) {
		case 10:
			return "ten";
		case 11:
			return "eleven";
		case 12:
			return "twelve";
		case 13:
			return "thirteen";
		case 14:
			return "fourteen";
		case 15:
			return "fifteen";
		case 16:
			return "sixteen";
		case 17:
			return "seventeen";
		case 18:
			return "eighteen";
		case 19:
			return "ninteen";
		case 0:
			return "";
		default:
			return "";
		}
	}

	/*----------ty--------------*/
	public String pntTy(int x) {
		switch (x) {
		case 2:
			return "twenty";
		case 3:
			return "thirty";
		case 4:
			return "forty";
		case 5:
			return "fifty";
		case 6:
			return "sixty";
		case 7:
			return "seventy";
		case 8:
			return "eigty";
		case 9:
			return "ninty";
		default:
			return "";
		}
	}

	/*-----------print digit------------*/
	public String pntDigit(int x) {
		switch (x) {
		case 1:
			return "one";
		case 2:
			return "two";
		case 3:
			return "three";
		case 4:
			return "four";
		case 5:
			return "five";
		case 6:
			return "six";
		case 7:
			return "seven";
		case 8:
			return "eight";
		case 9:
			return "nine";
		case 0:
			return "";
		default:
			return "";

		}

	}

	/*------for test--------------*/
	public static void main(String[] args) {
		PrintEnglishWord pew = new PrintEnglishWord();
		int x = 1039012304;
		String str = pew.printNumber(x);
		System.out.println(str);
	}

}
