package kql.test.practise;

import java.util.Stack;

public class SortedStack {

	// stack 1: 12 3 4 53 3 23 7 47 5 8 9 20
	// stack 2:

	public void sort(Stack<Integer> stk1) {

		Stack<Integer> stk2 = new Stack<Integer>();
		if (stk1.empty())
			throw new IllegalArgumentException("stack is emtpy");

		int pp1 = 0, pk2 = 0;
		while (!stk1.isEmpty()) {
			pp1 = stk1.pop();

			if (stk2.isEmpty()) {
				stk2.push(pp1);
				pp1 = stk1.pop();
			} else {
				pk2 = stk2.peek();
			}

			while (pp1 < pk2) {
				if (!stk2.empty()) {
					stk1.push(stk2.pop());
					if (stk2.empty()) {
						stk2.push(pp1);
						pp1 = stk1.pop();
						pk2 = stk2.peek();
					}
				}
			}

			if (pp1 >= pk2 || stk2.empty()) {
				stk2.push(pp1);
			}

		} // end while

		while (!stk2.isEmpty()) {
			stk1.push(stk2.pop());
		}
	}

	// for test

	public static void main(String[] args) {

		SortedStack ss = new SortedStack();
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(12);
		stack.push(2);
		stack.push(34);
		stack.push(5);
		stack.push(11);
		stack.push(13);
		stack.push(27);
		stack.push(1);
		stack.push(6);
		stack.push(7);
		stack.push(6);
		stack.push(5);
		ss.sort(stack);
		for (Integer i : stack) {
			System.out.print(i + " ");
		}

	}

} // end class

