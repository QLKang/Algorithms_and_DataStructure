// quick sort
// use the algorithm introduced by text book


package kql.test.practise;

public class QuickSort {
	// ---------quick sort----------------------
	public void quickSort(int[] arr, int l, int r) {
		if (l < r) {
			int p = partition(arr, l, r);
			quickSort(arr, l, p - 1);
			quickSort(arr, p + 1, r);
		}
	}

	// --------------partition------------------
	public int partition(int[] arr, int l, int r) {
		int pivot = arr[r];
		int i = l - 1;
		for (int j = l; j <= r - 1; j++) {
			if (arr[j] < pivot) {
				i = i + 1;
				exchange(arr, i, j);
			}
		}
		exchange(arr, i + 1, r);
		return i + 1;
	}

	// ----------exchange two integers------------
	public void exchange(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	//-------------- for test --------------------
	public static void main(String[] args) {
		int[] arr = { 2, 8, 7, 1, 3, 5, 6, 4 };
		int l = 0, r = 7;
		QuickSort qs = new QuickSort();
		qs.quickSort(arr, l, r);
		for (Integer i : arr) {
			System.out.print(i + " ");
		}
	}

}













	int randomPartition(int[] arr, int left, int right) {
		if (arr.length == 0 || arr == null || left > right)
			return -1;

		int randIndex = (int) (Math.random() * (right - left + 1));
		swap(arr, randIndex, right);
		int pivot = arr[right];
		int j = 0;
		int i = j - 1;
		for (j = 0; j < right; j++) {
			if (arr[j] < pivot) {
				swap(arr, i+1, j);
				i++;
			}
		}
		swap(arr, i + 1, j);
		return i + 1;
	}

	void swap(int[] arr, int i, int j) {
		if (i < 0 || i >= arr.length || j < 0 || j >= arr.length)
			return;
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

















