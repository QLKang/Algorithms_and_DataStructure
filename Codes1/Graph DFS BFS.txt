/*                             A
 *                          /  |  \                           
 *                         /   |   \                                                  
 *                        B    C    D                                                    
 *                       / \   |                                                                    
 *                      /   \  |                     
 *                     E      F                                
 *      A-v0, B-v1, C-v2, D-v3, E-v4, F-v5
 *      Store in an ArrayList<LinkedList<Vertex>> structure
 *      
 *      A-->B-->C-->D
 *      B-->A-->E-->F
 *      C-->A-->F
 *      D-->A
 *      E-->B
 *      F-->C-->B                                                                         
 *                                                                                
 *      DFS , BFS                                                                     
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;

// build graphs   // it seems map is better than arraylist
/*-------------------------------------------------------------------------------------------------*/
class Graph {
	// store the vertexes in the arraylist
	ArrayList<LinkedList<Vertex>> nodeList = new ArrayList<LinkedList<Vertex>>();

	// void buildGraph(Graph g, Vertex newVertex) {
	// if (g == null || newVertex == null)
	// return;
	// addVertex(g, newVertex);
	// addEdge(g, newVertex);
	// }

	void addVertex(Graph g, Vertex v) {
		if (g == null || v == null)
			return;
		if (getEdgeList(g, v) == null) {
			LinkedList<Vertex> list = new LinkedList<Vertex>();
			list.add(v);
			nodeList.add(list);
		}
	}

	void addEdge(Graph g, Vertex start, Vertex dest) {
		// boundary condition
		if (g == null || dest == null)
			return;
		LinkedList<Vertex> list = getEdgeList(g, start);
		if (list != null) {
			list.add(dest);
		}
	}

	// return the list
	LinkedList<Vertex> getEdgeList(Graph g, Vertex vertexName) {
		// boundary condition........
		for (LinkedList<Vertex> list : nodeList) {
			if (list.getFirst().equals(vertexName))
				return list;
		}
		return null;
	}

}

/* ---------------------------------------------------------------------- */

class Vertex {
	char v;
	boolean flag = false;

	public Vertex(char c) {
		this.v = c;
	}
}

/* ----------------------------------------------------------------------------- */
public class GraphExplore {

	/* depth first search */
	Stack<Vertex> stk = new Stack<Vertex>();

	void dfs(Graph g, Vertex s) {
		if (g == null || s == null)
			return;
		Vertex u = s;
		u.flag = true;
		stk.push(u);
		System.out.println(u.v);
		while (!stk.isEmpty()) {
			Vertex pk = stk.peek();
			Vertex v = getAdjacentUnvisited(g, pk);
			if (v != null) {
				dfs(g, v);
			} else {
				stk.pop();
			}
		}
	}

	/* Breadth first search */
	LinkedList<Vertex> queue = new LinkedList<Vertex>();

	void bfs(Graph g, Vertex s) {
		resetFlag(g);
		if (g == null || s == null)
			return;
		Vertex u = s;
		s.flag = true;
		queue.add(u);
		System.out.println(u.v);
		while (!queue.isEmpty()) {
			u = queue.removeFirst();
			LinkedList<Vertex> edgeList = g.getEdgeList(g, u);
			for (Vertex vertex : edgeList) {
				if (vertex != null && vertex.flag == false) {
					vertex.flag = true;
					queue.add(vertex);
					System.out.println(vertex.v);
				}
			}

		}

	}

	Vertex getAdjacentUnvisited(Graph g, Vertex vertexName) {
		if (g == null || vertexName == null)
			return null;

		LinkedList<Vertex> edgeList = g.getEdgeList(g, vertexName);
		if (edgeList != null) {
			for (Vertex v : edgeList) {
				if (v != null && v.flag == false) {
					return v;
				}
			}
		}
		return null;
	}

	void resetFlag(Graph g) {
		for (LinkedList<Vertex> list : g.nodeList) {
			for (Vertex v : list) {
				v.flag = false;
			}
		}
	}

	// build graph for test------------
	public static void main(String[] args) {
		Graph g = new Graph();
		Vertex v0 = new Vertex('A');
		Vertex v1 = new Vertex('B');
		Vertex v2 = new Vertex('C');
		Vertex v3 = new Vertex('D');
		Vertex v4 = new Vertex('E');
		Vertex v5 = new Vertex('F');
		g.addVertex(g, v0);
		g.addVertex(g, v1);
		g.addVertex(g, v2);
		g.addVertex(g, v3);
		g.addVertex(g, v4);
		g.addVertex(g, v5);

		g.addEdge(g, v0, v1);
		g.addEdge(g, v0, v2);
		g.addEdge(g, v0, v3);

		g.addEdge(g, v1, v0);
		g.addEdge(g, v1, v4);
		g.addEdge(g, v1, v5);

		g.addEdge(g, v2, v0);
		g.addEdge(g, v2, v5);

		g.addEdge(g, v3, v0);

		g.addEdge(g, v4, v1);

		g.addEdge(g, v5, v1);
		g.addEdge(g, v5, v2);

		GraphExplore ge = new GraphExplore();
		ge.dfs(g, v0);
		System.out.println("-------Separation line--------");
		ge.bfs(g, v1);
	}

}
