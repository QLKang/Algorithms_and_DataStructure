package com.test2.kql;

/*
 * 9.2 
 * Imagine a robot sitting on the upper left comer of an X by Y grid. 
 * The robot can only move in two directions: right and down. How many 
 * possible paths are there for the robot to go from (0, 0) to (X, Y) ?
 * 
 * FOLLOW UP
 * Imagine certain spots are "off limits," such that the robot cannot 
 * step on them. Design an algorithm to find a path for the robot from 
 * the top left to the bottom right.
 * 
 * path(x, y) = path(x-1, y) + path(x, y-1)
 */
public class RobotMovePathsDP {

	int paths(int x, int y, int[][] table) {
		if (table[x][y] > 0)
			return table[x][y];
		if (x == 0 && y == 0) {
			table[x][y] = 0;
		} else if (x == 0 && y != 0) {
			table[x][y] = 1;
		} else if (x != 0 && y == 0) {
			table[x][y] = 1;
		} else {
			table[x][y] = paths(x - 1, y, table) + paths(x, y - 1, table);
		}
		return table[x][y];
	}

	int paths(int x, int y) {
		if (x < 0 || y < 0) {
			return -1;
		}
		int[][] table = new int[x + 1][y + 1];
		return paths(x, y, table);
	}

	// ----for test-----
	public static void main(String[] args) {
		RobotMovePathsDP dp = new RobotMovePathsDP();
		int x = 2, y = 2;
		int result = dp.paths(x, y);
		System.out.println(result);
	}
}
