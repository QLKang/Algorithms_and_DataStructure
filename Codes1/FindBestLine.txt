package com.test2.kql;

/*
 * 7.6 Given a two-dimensional graph with points on it, find a line which passes the most number of points
 * use le hashmap
 * */
import java.util.HashMap;

public class FindBestLine {
	public static Line findBestLine(GraphPoint[] points) {
		Line bestLine = null;
		HashMap<Line, Integer> line_count = new HashMap<Line, Integer>();
		for (int i = 0; i < points.length; i++) {
			for (int j = i + 1; j < points.length; j++) {

				Line line = new Line(points[i], points[j]);
				if (!line_count.containsKey(line)) {
					line_count.put(line, 0);
				}
				line_count.put(line, line_count.get(line) + 1);
				if (bestLine == null
						|| line_count.get(line) > line_count.get(bestLine)) {
					bestLine = line;
				}
			}
		}
		return bestLine;
	}

	public static void main(String[] args) {
		GraphPoint a = new GraphPoint(1, 2);
		GraphPoint b = new GraphPoint(2, 4);
		GraphPoint c = new GraphPoint(3, 6);
		GraphPoint d = new GraphPoint(7, 14);
		GraphPoint e = new GraphPoint(7, 2);
		GraphPoint f = new GraphPoint(1, -2);
		GraphPoint g = new GraphPoint(61, 12);
		GraphPoint h = new GraphPoint(-11, -34);
		GraphPoint i = new GraphPoint(20, 4);
		GraphPoint j = new GraphPoint(8, 9);
		GraphPoint k = new GraphPoint(1, 3);
		GraphPoint l = new GraphPoint(5, 15);
		GraphPoint m = new GraphPoint(10, 30);
		GraphPoint[] points = { a, b, c, d, e, f, g, h, i, j, k, l, m };
		FindBestLine fbl = new FindBestLine();
		Line line = fbl.findBestLine(points);
		System.out.println("slope= " + line.slope + ", intercept= "
				+ line.intercept);
	}
}

/*-------------------------------------*/
class Line {
	private static double epsilon = 0.0001;
	public double slope;
	public double intercept;
	private boolean infinite_slope = false;

	public Line(GraphPoint p, GraphPoint q) {
		if (Math.abs(p.x - q.x) > epsilon) {
			slope = (p.y - q.y) / (p.x - q.x);
			intercept = p.y - slope * p.x;
		} else {
			infinite_slope = true;
			intercept = p.x;
		}
	}

	public boolean isEqual(double a, double b) {
		return (Math.abs(a - b) < epsilon);
	}

	@Override
	public int hashCode() {
		int sl = (int) (slope * 1000);
		int in = (int) (intercept * 1000);
		return sl | in;
	}

	@Override
	public boolean equals(Object o) {
		Line l = (Line) o;
		if (isEqual(l.slope, slope) && isEqual(l.intercept, intercept)
				&& infinite_slope == l.infinite_slope) {
			return true;
		}
		return false;
	}
}

/*------------------------------------------------*/
class GraphPoint {
	int x = 0;
	int y = 0;

	public GraphPoint(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
