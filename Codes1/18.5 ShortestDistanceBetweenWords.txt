package com.test2.kql;

/*
 * 18.5 You have a large text file containing words. Given any two words,
 * find the shortest distance (in terms of number of words) between them 
 * in the file. If the operation will be repeated many times for the same 
 * file (but different pairs of words), can you optimize your solution?
 * 
 */
public class ShortestDistanceBetweenWords {

	int shortestDis(String[] words, String word1, String word2) {
		if (words == null || words.length == 0 || word1 == null
				|| word2 == null || word1 == "" || word2 == "")
			return -1;

		int wordPos1 = -1;
		int wordPos2 = -1;
		int min = Integer.MAX_VALUE;

		for (int i = 0; i < words.length; i++) {
			String currentWord = words[i];
			int distance = 0;
			if (word1.equals(currentWord)) {
				wordPos1 = i;
				distance = wordPos1 - wordPos2;
				if (distance < min && wordPos2 > 0) {
					min = distance;
				}
			} else if (word2.equals(currentWord)) {
				if (word2.equals(currentWord)) {
					wordPos2 = i;
					distance = wordPos2 - wordPos1;
					if (distance < min && wordPos1 > 0) {
						min = distance;
					}
				}
			}
		}

		return min;
	} // end method

	// for test
	public static void main(String[] args) {
		ShortestDistanceBetweenWords sd = new ShortestDistanceBetweenWords();
		String[] words = { "what", "are", "you", "doing", "now", "?", "I",
				"am", "coding", "and", "missing", "you", ".", "Do", "you",
				"know", "?" };
		String word1 = "are";
		String word2 = "hello";

		int dis = sd.shortestDis(words, word1, word2);
		System.out.println(dis);
	}

}
